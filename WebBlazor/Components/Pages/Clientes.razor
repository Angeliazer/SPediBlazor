@page "/clientes"
@attribute [StreamRendering]
@inject HttpClient _http
@rendermode @(new InteractiveServerRenderMode (prerender:false))
@inject NavigationManager Topag

<PageTitle>Clientes</PageTitle>

<h3>Clientes </h3>

<div class="container">

    @if (clientes == null)
    {
        <p><em>Aguarde...</em></p>
    }
    else
    {
        <button class="btn-sm btn-primary" style="font-style:italic" @onclick="NewCliente">+ Novo Cliente</button>

        <table class="table">
            <thead>
                <tr>
                    <th>Nome Cliente</th>
                    <th>Nro Telefone</th>
                    <th>Contato     </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in clientes)
                {
                    <tr>
                        <td>@item.NomeCliente</td>
                        <td>@item.NroTelefone</td>
                        <td>@item.NomeContato</td>
                        <td><button class="btn-sm btn-danger" data-toggle="modal" @onclick="@(() => Apagar(item))">Deletar </button></td>
                        <td><button class="btn-sm btn-primary" @onclick="@(()=>Seleciona(item))">Pedido</button></td>
                        <td><button class="btn-sm btn-secondary" @onclick="@(()=>Seleciona(item))">Alterar</button></td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

<button class="btn-sm btn-secondary" @onclick="@(()=>Envia())">Banco de Dados</button>

@if (Show)
{
    <ModalConfirma @ref="ModalConf" Exibir=@Show Title="Confirma Exclusão?" EventodeRetorno="@(() => RetornoFuncao())">
        <div>
            <br />
            <br />
            <h6>Cliente: @Objcliente.NomeCliente</h6>
        </div>
    </ModalConfirma>
}

@code
 {
            ModalConfirma? ModalConf = null;

            public List<Cliente>? clientes = null!;
            public bool Show = false;
            public Cliente Objcliente = null!;

            protected override async Task OnInitializedAsync()
            {
                clientes = await _http.GetFromJsonAsync<List<Cliente>>(@"/api/v1/clientes");
            }

            public async Task Envia()
            {
                Cliente cli = new Cliente
                {
                    NomeCliente = "Azer Felippe da Silva",
                    CpfCliente = "0",
                    CnpjCliente = "0",
                    TipoCliente = ETipoCliente.Fisica,
                    NroTelefone = "21967453273",
                    NomeContato = "Yago",
                    LimiteCredito = 25000,
                    Enderecos = new List<Endereco>
            {
                new Endereco {
                    NomeRua="Rua Goiás",
                    Numero = "216",
                    Bairro = "Mutuá",
                    Cidade = "São Gonçalo",
                    Estado = EEstado.DF,
                    Cep = "24460170",
                    TipoEnd = ETipoEndereco.Entrega
                },
                new Endereco
                {
                    NomeRua = "Rua Santos da Cruz",
                    Numero = "216",
                    Bairro = "Mutuá",
                    Cidade = "São Gonçalo",
                    Estado = EEstado.DF,
                    Cep = "24460170",
                    TipoEnd = ETipoEndereco.Entrega
                }
            }
        };

        var result = await _http.PostAsJsonAsync<Cliente>("/api/v1/clientes", cli);

        Console.WriteLine(result.StatusCode);



    }

    public void Apagar(Cliente cliente)
    {
        Show = true;
        Objcliente = new();
        Objcliente = cliente;
    }

    public async Task RetornoFuncao()
    {
        Show = false;
        switch (ModalConf?.AcaoResultante)
        {
            case "S":
                await ApagaRegistro();
                break;

            case "N":
                break;

            default:

                break;
        }
    }

    public async Task ApagaRegistro()
    {
        await _http.DeleteFromJsonAsync<Cliente>($@"/api/v1/clientes/{Objcliente.ClienteId}");
        await OnInitializedAsync();
    }

    public void Seleciona(Cliente cliente)
    {

    }
    public void NewCliente()
    {
        Topag.NavigateTo("/newcliente");
    }
}
