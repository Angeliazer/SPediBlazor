@page "/clientes"
@attribute [StreamRendering]
@inject HttpClient _http
@rendermode @(new InteractiveServerRenderMode (prerender:false))
@inject NavigationManager Topag

<PageTitle>Clientes</PageTitle>

<h3>Clientes </h3>

<div class="container">

    @if (clientes == null)
    {
        <p><em>Aguarde...</em></p>
    }
    else
    {
        <button class="btn-sm btn-primary" style="font-style:italic" @onclick="NewCliente">+ Novo Cliente</button>

        <table class="table col-md-12">
            <thead>
                <tr>
                    <th>Nome Cliente</th>
                    <th>Nro Telefone</th>
                    <th>Contato     </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in clientes)
                {
                    <tr>
                        <td>@item.NomeCliente</td>
                        <td>@item.NroTelefone</td>
                        <td>@item.NomeContato</td>
                        <td><button class="btn-sm btn-danger" data-toggle="modal" @onclick="@(() => Apagar(item))">Deletar </button></td>
                        <td><button class="btn-sm btn-primary" @onclick="@(() => Seleciona(item))">Pedido</button></td>
                        <td><button class="btn-sm btn-secondary" @onclick="@(() => Seleciona(item))">Alterar</button></td>
                        <td><button type="button" class="btn-sm btn-dark" @onclick="(() => Confirma(item))">Apaga</button></td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

@*<button class="btn-sm btn-secondary" @onclick="@(() => Envia())">Banco de Dados</button>*@

@*@if (Show)
    {
        <ModalConfirma @ref="ModalConf" Exibir=@Show Title="Confirma Exclusão?" EventodeRetorno="@(() => RetornoFuncao())">
            <div>
                <br />
                <br />
                <h6>Cliente: @Objcliente.NomeCliente</h6>
            </div>
        </ModalConfirma>
    }*@

<Mensagens @ref="Mensa" Titulo=@Titul Mostra=@Mostr Msg=@Mensag Confirma=@Confirm EventoRetorno="@(() => ReturnFuncao())"> </Mensagens>

@*<div class="modal shadow-lg" id="CaixaMensagem" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true" style="display:@Mostra">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <div class="modal-title">
                        <h4>@Titulo</h4>
                    </div>
                    <div>
                        <button class="btn-sm btn-close" data-bs-dismiss="close" @onclick="Fechar"></button>
                    </div>
                </div>
                <div class="modal-body">
                    <h5>@Msg</h5>
                </div>

                <div class="modal-footer">
                    <button class="btn-sm btn-danger" @onclick="() => ConfirmaDelete()" data-bs-dismiss="close">Excluir</button>
                    <button class="btn-sm btn-secondary" data-bs-dismiss="close" @onclick="Fechar">Close</button>
                </div>
            </div>
        </div>
    </div>*@

@code
 {
    ModalConfirma? ModalConf = null;

    Mensagens? Mensa = null;

    public bool Confirm { get; set; } = false;
    public string Mensag { get; set; } = string.Empty;
    public string Titul { get; set; } = string.Empty;
    public string Mostr { get; set; } = string.Empty;


    public List<Cliente>? clientes = null!;
    public bool Show = false;
    public Cliente Objcliente = null!;
    public int Indice { get; set; } = 0;
    public Cliente Cli = new();
    public string Titulo { get; set; } = string.Empty;
    public string Msg { get; set; } = string.Empty;
    public string Mostra { get; set; } = "none";

    protected override async Task OnInitializedAsync()
    {
        clientes = await _http.GetFromJsonAsync<List<Cliente>>(@"/api/v1/clientes");
    }

    //public async Task ConfirmaDelete()
    //{
    //    await Task.Delay(1000);
    //    Mostr = "none";
    //}

    //public void Fechar()
    //{
    //    Mostr = "none";

    //}

    public void Confirma(Cliente cli)
    {
        Indice = cli.ClienteId;
        Mensag = $"Confirma Exclusão do Cliente com o Id {Indice}?";
        Titul = "Confirma Exclusão?";
        Mostr = "block";
    }

    public async Task Envia()
    {
        Cliente cli = new Cliente
        {
            NomeCliente = "Angélica Rigon  da Silva",
            CpfCliente = "0",
            CnpjCliente = "0",
            TipoCliente = ETipoCliente.Fisica,
            NroTelefone = "21967453273",
            NomeContato = "Yago",
            LimiteCredito = 25000,
            Enderecos = new List<Endereco>
{
                new Endereco {
                    NomeRua="Rua Goiás",
                    Numero = "216",
                    Bairro = "Mutuá",
                    Cidade = "São Gonçalo",
                    Estado = EEstado.DF,
                    Cep = "24460170",
                    TipoEnd = ETipoEndereco.Entrega
                },
                new Endereco
                {
                    NomeRua = "Rua Santos da Cruz",
                    Numero = "216",
                    Bairro = "Mutuá",
                    Cidade = "São Gonçalo",
                    Estado = EEstado.DF,
                    Cep = "24460170",
                    TipoEnd = ETipoEndereco.Faturamento
                }
            }
        };

        var result = await _http.PostAsJsonAsync<Cliente>("/api/v1/clientes", cli);

        Console.WriteLine(result.StatusCode);
    }

    public void Apagar(Cliente cliente)
    {
        Show = true;
        Objcliente = new();
        Objcliente = cliente;
    }

    public async Task ReturnFuncao()
    {
        if (Mensa?.Confirma==true)
        {
            await ApagaRegistro();
        }
        Mostra = "none";
        Confirm = false;
    }

    public async Task RetornoFuncao()
    {
        Show = false;
        switch (ModalConf?.AcaoResultante)
        {
            case "S":
                await ApagaRegistro();
                break;

            case "N":
                break;

            default:

                break;
        }
    }

    public async Task ApagaRegistro()
    {
        await _http.DeleteFromJsonAsync<Cliente>($@"/api/v1/clientes/{Objcliente.ClienteId}");
        await OnInitializedAsync();
    }

    public void Seleciona(Cliente cliente)
    {

    }
    public void NewCliente()
    {
        Topag.NavigateTo("/newcliente");
    }
}
