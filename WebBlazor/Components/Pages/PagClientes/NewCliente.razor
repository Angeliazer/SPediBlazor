@page "/newcliente"
@rendermode @(new InteractiveServerRenderMode (prerender:false))
@using System.Reflection

<TopBanner Texto="Novo Cliente"></TopBanner>
<br />

<EditForm Model="@Cliente" OnValidSubmit="HandledSalvar">
    <DataAnnotationsValidator />
    <ValidationSummary></ValidationSummary>
    <div class="card-header border-2 justify-content-center border-primary border" style="border-radius:3px">
        <div class="row d-flex flex-row">
            <div class="col-8">
                <InputText style="width:100%; font-style:italic; border-radius:3px" @bind-Value="Cliente.NomeCliente" placeholder="Razão Cliente"></InputText>
                <ValidationMessage For="@(() => Cliente.NomeCliente)" />
            </div>
            <div class="col-4">
                <InputText style="width:100%; font-style:italic; border-radius:3px" @bind-Value="Cliente.NomeContato" placeholder="Contato"></InputText>
                <ValidationMessage For="@(() => Cliente.NomeContato)" />
            </div>
        </div>
        <p></p>
        <div class="row d-flex flex-row">
            <div class="col-1">
                <InputSelect class="form-select-sm" style="width:100%; font-style: italic; border-radius: 3px" @bind-Value="Cliente.TipoCliente">
                    @foreach (var opc in Enum.GetValues(typeof(ETipoCliente)))
                    {
                        <option>@opc</option>
                    }
                </InputSelect>
            </div>

            <div class="col-3">
                @switch ((int)Cliente.TipoCliente)
                {
                    case 0:
                        <InputText style="width:100%; font-style: italic; border-radius: 3px; text-align: right"
                                   @bind-Value="Cliente.CpfCliente" placeholder="Nro CPF/CNPJ"></InputText>
                        break;
                    case 1:
                        <InputText style="width:100%; font-style: italic; border-radius: 3px; text-align: right"
                                   @bind-Value="Cliente.CpfCliente" placeholder="Nro CPF"></InputText>
                        <ValidationMessage For="@(() => Cliente.CpfCliente)" />
                        Cliente.CnpjCliente = null;

                        break;
                    case 2:
                        <InputText style="width:100%; font-style: italic; border-radius: 3px; text-align: right"
                                   @bind-Value="Cliente.CnpjCliente" placeholder="Nro CNPJ"></InputText>
                        <ValidationMessage For="@(() => Cliente.CnpjCliente)" />
                        Cliente.CpfCliente = null;

                        break;
                }
            </div>
            <div class="col-2">
                <InputText style="width:100%; font-style: italic; border-radius: 3px; text-align: right"
                           @bind-Value="Cliente.NroTelefone" placeholder="Nro Telefone"></InputText>
                <ValidationMessage For="@(() => Cliente.NroTelefone)"></ValidationMessage>
            </div>
            <div class="col-2">
                <InputNumber style="width:100%; font-style: italic; border-radius: 3px; text-align: right"
                             @bind-Value="Cliente.LimiteCredito" placeholder="Digite o Limite de Crédito"></InputNumber>
            </div>
            <div class="col-2">
                <InputText style="width:100%; font-style: italic; border-radius: 3px"
                           @bind-Value="Cliente.Email" placeholder="Digite o e-mail"></InputText>
                <ValidationMessage For="@(() => Cliente.Email)"></ValidationMessage>
            </div>
            <div class="col-2">
                <InputText style="width:100%; font-style: italic; border-radius: 3px; text-align: right; color: darkred "
                           @bind-Value=@DataCadastro disabled="true"></InputText>
            </div>
        </div>
        <p></p>
        <h6 style="color:darkred"><em>Endereço</em></h6>
        <div>
            <InputText class="mb-2" style="width: 10%; border-radius: 3px; text-align:right" @bind-Value="Cliente.Endereco.Cep" @onfocus="LimpaEnder" placeholder="Cep"></InputText>
            <button class="mb-1 btn btn-sm btn-primary shadow-none" @onclick="ConsultaCep">Consulta Cep</button>
            <span><em>@mensagemTexto</em></span>
        </div>
        <div class="row d-flex flex-row">
            <div class="col-5">
                <InputText style="width:100%; font-style: italic; border-radius: 3px" @bind-Value="Cliente.Endereco.NomeRua" placeholder="Logradouro"></InputText>
                <ValidationMessage For="@(() => Cliente.Endereco.NomeRua)"></ValidationMessage>
            </div>

            <div class="col-1">
                <InputText style="width:100%; font-style: italic; border-radius: 3px; text-align:right" @bind-Value="Cliente.Endereco.Numero" placeholder="Nro"></InputText>
                <ValidationMessage For="@(() => Cliente.Endereco.Numero)"></ValidationMessage>
            </div>
            <div class="col-2">
                <InputText style="width:100%; font-style: italic; border-radius: 3px" @bind-Value="Cliente.Endereco.Bairro" placeholder="Bairro"></InputText>
                <ValidationMessage For="@(() => Cliente.Endereco.Bairro)"></ValidationMessage>
            </div>

            <div class="col-3">
                <InputText style="width:100%; font-style: italic; border-radius: 3px" @bind-Value="Cliente.Endereco.Cidade" placeholder="Cidade"></InputText>
                <ValidationMessage For="@(() => Cliente.Endereco.Cidade)"></ValidationMessage>
            </div>

            <div class="col-1">
                <InputSelect class="form-select-sm" style="width:100%; font-style: italic; border-radius:3px" @bind-Value="Cliente.Endereco.Estado">
                    @foreach (var opc_est in Enum.GetValues(typeof(EEstado)))
                    {
                        <option>@opc_est</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => Cliente.Endereco.Estado)"></ValidationMessage>
            </div>
        </div>
    </div>
    <div class="card-footer mt-2 border-2 justify-content-xl-center border-primary border" style="border-radius:3px">
        <div class="row">
            <div class="col">
                <button type="submit" class="col-1 btn btn-sm btn-success shadow-none" style="color:white" @onclick="HandledSalvar">
                    <i class="bi-save"</i> Salvar
                </button>
                <button class="col-1 btn btn-sm btn-primary shadow-none" style="color:white" @onclick="Voltar">
                    <i class="bi-arrow-left-circle"></i> Voltar
                </button>
            </div>
        </div>
    </div>
</EditForm>

@if (Sim)
{
    <p></p>
    <div class="container">
        <div class="alert alert-danger alert-dismissible" role="alert">
            <strong>Atenção!</strong> Existem Campos que não foram preenchidos.
            <button class="btn-sm btn-close" data-bs-dismiss="alert" aria-label="Close" @onclick="Sair"></button>
        </div>
    </div>
}

<Mensagens @ref="Mensa" BotaoTrue=@MsgButton Titulo=@Titul Mostra=@Mostr Msg=@Mensag Confirma=@Confirm EventoRetorno="(() => ReturnFuncao())"> </Mensagens>

@code
{
    Mensagens? Mensa = null;

    public bool Confirm { get; set; } = false;
    public string Mensag { get; set; } = string.Empty;
    public string Titul { get; set; } = string.Empty;
    public string Mostr { get; set; } = "none";
    public string MsgButton { get; set; } = string.Empty;
    public bool Sim { get; set; } = false;

    public Cliente Cliente = new();
    public bool isValid { get; set; } = false;
    public bool EnabledSalvar = true;
    public string DataCadastro = $"{DateTime.Now:dd/MM/yyy}";
    private string mensagemTexto { get; set; } = string.Empty;

    private Endereco Endereco = new();

    public EEstado estado = new();

    private void Sair()
    {
        Sim = false;
    }

    private void LimpaEnder()
    {
        Cliente.Endereco.Cep = null;
        Cliente.Endereco.NomeRua = null;
        Cliente.Endereco.Bairro = null;
        Cliente.Endereco.Cidade = null;
        Cliente.Endereco.Estado = EEstado.AC;
        Cliente.Endereco.Numero = null;
    }

    private async Task ConsultaCep()
    {
        if ((Cliente.Endereco.Cep != null) && (Cliente.Endereco.Cep != ""))
        {
            string? value;


            mensagemTexto = "Aguarde...";

            Dictionary<string, string>? Dados = new();

            try
            {
                Dados = await _http.GetFromJsonAsync<Dictionary<string, string>>($"https://viacep.com.br/ws/{Cliente.Endereco.Cep}/json");
                bool hasValue = Dados.TryGetValue("logradouro", out value);

                if (hasValue)
                {
                    Cliente.Endereco.NomeRua = value;

                    Dados.TryGetValue("bairro", out value);
                    Cliente.Endereco.Bairro = value;

                    Dados.TryGetValue("localidade", out value);
                    Cliente.Endereco.Cidade = value;

                    Dados.TryGetValue("uf", out value);

                    Enum.TryParse(value, out estado);

                    Cliente.Endereco.Estado = estado;
                }
                else
                {
                    LimpaEnder();
                }
            }
            catch
            {
                LimpaEnder();
            }
            mensagemTexto = string.Empty;

        }
    }

    public async Task ReturnFuncao()
    {
        if (Mensa?.Confirma == true)
        {
            await Salvar();
        }
        Confirm = false;
        Mostr = "none";
    }

    private void HandledSalvar()
    {

        //isValid = Cliente.BuscarValoresClasse(Cliente);

        //Endereco.BuscarValoresClasse(Cliente.Endereco);

        //isValid = Cliente.VerificaClasse();

        if (Cliente.NomeCliente == null || Cliente.NomeContato == null || Cliente.NomeCliente == "" || Cliente.NomeContato == "" ||
            (Cliente.CpfCliente == null && Cliente.CnpjCliente == null) || (Cliente.CpfCliente == "" && Cliente.CnpjCliente == "") ||
            Cliente.TipoCliente == ETipoCliente.Tipo || Cliente.Email == null || Cliente.Email == "" ||
            Cliente.Endereco.NomeRua == null || Cliente.Endereco.Numero == null || Cliente.Endereco.Bairro == null ||
            Cliente.Endereco.NomeRua == "" || Cliente.Endereco.Numero == "" || Cliente.Endereco.Bairro == "" ||
            Cliente.Endereco.Cidade == null || Cliente.Endereco.Cep == null || Cliente.Endereco.Cidade == "" || Cliente.Endereco.Cep == "")
        {
            isValid = false;
        }
        else
        {
            isValid = true;
        }

        if (isValid)
        {
            ConfirmaSalvar();
        }
        else
        {

        }
    }

    public void ConfirmaSalvar()
    {

        MsgButton = "Confirma";

        Mensag = $"Cliente: {Cliente.NomeCliente}";
        Titul = "Confirma Inclusão";
        Mostr = "block";

        Cliente.DataCadastro = Convert.ToDateTime(DataCadastro);
    }

    public void Voltar()
    {
        ToPag.NavigateTo("/listclientes");
    }

    public async Task Salvar()
    {
        HttpResponseMessage cliente = await _http.PostAsJsonAsync<Cliente>("/api/v1/clientes", Cliente);

        ToPag.NavigateTo("/listclientes");
    }
}
